import React, { useState, useEffect } from "react";
import DoQuestion from "../Components/DoQuestion";
import ViewQuestion from "../Components/ViewQuestion";
import questionIDs from "../helpers/questionIDs";
import PropTypes from "prop-types";

function QuestionPage(props) {
  const [isLoaded, setIsLoaded] = useState(false);
  const [buttonCounter, setButtonCounter] = useState(0);
  //
  // q_ids generated by filter component for questions in certain category
  //
  const q_ids = questionIDs.get_ids;
  //
  // Prevents user from doing just one question
  //
  if (q_ids.length == 0) {
    props.changePage("home");
  }
  //
  // Whether question submitted
  //
  const [qCompleted, setQCompleted] = useState(false);
  //
  // result used to display Correct! or Incorrect in Result header
  //
  const [result, setResult] = useState("");
  //
  // result head is header which shows incorrect or correct
  //
  const [showResultHead, setShowResultHead] = useState(false);
  //
  // Current index of question in list of question generated by filter
  //
  //
  // QuestionComponent is either to do question or view previous completed question
  //
  const [QuestionComponent, setQuestionComponent] = useState(null);

  const clearLocalStorage = () => {
    for (let key of Object.keys(localStorage)) {
      if (key.toString() != "auth") {
        localStorage.removeItem(key.toString());
      }
    }
  };
  const calculateScore = () => {
    let total_correct = 0;
    let total = 0;
    for (const id of Object.keys(localStorage)) {
      if (id != "currentIdx" && id != "auth") {
        let user_answer = JSON.parse(localStorage.getItem(id)).selected_option;
        let correct_answer = JSON.parse(localStorage.getItem(id)).solution;
        if (user_answer == correct_answer) {
          total_correct++;
        }
        total += 1;
      }
    }
    if (total == 0) {
      return 0;
    } else {
      let percent = (total_correct / total) * 100;
      return Math.round(percent * 10) / 10;
    }
  };
  const showResult = (isCorrect) => {
    if (isCorrect) {
      setResult("Correct!");
    } else {
      setResult("Incorrect");
    }
    //
    // To display the result
    //
    setShowResultHead(true);

    setQCompleted(true);
  };

  const displayQuestionComponent = () => {
    if (!localStorage.getItem("currentIdx")) {
      let id = props.argument;
      localStorage.setItem("currentIdx", q_ids.indexOf(id).toString());
    }
    let currentIdx = localStorage.getItem("currentIdx");

    setShowResultHead(false);

    if (!(q_ids[parseInt(currentIdx)].toString() in localStorage)) {
      setQCompleted(false);
      setQuestionComponent(
        <DoQuestion
          id={q_ids[parseInt(currentIdx)]}
          showResult={showResult}
        ></DoQuestion>
      );
    } else {
      setQuestionComponent(
        <ViewQuestion
          id={q_ids[parseInt(currentIdx)]}
          showResult={showResult}
        ></ViewQuestion>
      );
    }
    setIsLoaded(true);
  };

  //
  // If id is in completed q_ids then the question has been completed so ViewQuestion is displayed
  // For when user clicks previous to see answers to previously submitted questions
  //
  useEffect(() => {
    displayQuestionComponent();
  }, [buttonCounter]);

  const handle_next = (event) => {
    //
    // Moves to next generated question
    //
    event.preventDefault();
    if (parseInt(localStorage.currentIdx) == q_ids.length - 1) {
      let score = calculateScore();
      clearLocalStorage();
      props.changePage(`finish/${score}`);
    } else {
      setButtonCounter(buttonCounter == 0 ? 1 : 0);
      localStorage.currentIdx = parseInt(localStorage.currentIdx) + 1;
    }
  };

  const handle_previous = (event) => {
    //
    // Moves to previous generated question
    //
    event.preventDefault();
    localStorage.currentIdx = parseInt(localStorage.currentIdx) - 1;
    setButtonCounter(buttonCounter == 0 ? 1 : 0);
  };

  if (!isLoaded) {
    return <h2>Loading...</h2>;
  } else {
    return (
      <>
        {/*-Header-*/}
        <div>
          <h1>
            {"Question " +
              (parseInt(localStorage.getItem("currentIdx")) + 1).toString()}
          </h1>
          <button
            onClick={() => {
              clearLocalStorage();
              props.changePage("home");
            }}
          >
            X
          </button>
        </div>
        {/*--------*/}
        {showResultHead && <h2>{result}</h2>}
        {/*-DoQuestion or ViewQuestion-*/}
        {QuestionComponent}
        {/*----------------------------*/}
        {/*-Displayed when not the last question and when question completed-*/}
        {!qCompleted &&
          parseInt(localStorage.getItem("currentIdx")) < q_ids.length - 1 && (
            <button
              onClick={() => {
                let score = calculateScore();
                clearLocalStorage();
                props.changePage(`finish/${score}`);
              }}
            >
              Finish
            </button>
          )}
        {/*------------------------------------------------------------------*/}
        <div>
          <button
            onClick={handle_previous}
            disabled={parseInt(localStorage.getItem("currentIdx")) == 0}
          >
            Previous
          </button>
          <button onClick={handle_next}>
            {parseInt(localStorage.getItem("currentIdx")) == q_ids.length - 1
              ? "Finish"
              : "Next"}
          </button>
        </div>
      </>
    );
  }
}

QuestionPage.propTypes = {
  changePage: PropTypes.func,
  argument: PropTypes.number,
};

export default QuestionPage;
