import React, { useState, useEffect } from "react";
import DoQuestion from "../Components/DoQuestion";
import ViewQuestion from "../Components/ViewQuestion";
import questionIDs from "../helpers/questionIDs";
import PropTypes from "prop-types";
import completed_qs from "../helpers/completedQs";

function QuestionPage(props) {
  const [isLoaded, setIsLoaded] = useState(false);
  //
  // q_ids generated by filter component for questions in certain category
  //
  const q_ids = questionIDs.get_ids;
  //
  // Prevents user from doing just one question
  //
  if (q_ids.length == 0) {
    props.changePage("home");
  }
  //
  // Whether question submitted
  //
  const [qCompleted, setQCompleted] = useState(false);
  //
  // result used to display Correct! or Incorrect in Result header
  //
  const [result, setResult] = useState("");
  //
  // result head is header which shows incorrect or correct
  //
  const [showResultHead, setShowResultHead] = useState(false);
  //
  // Current index of question in list of question generated by filter
  //
  const [currentIdx, setCurrentIdx] = useState(q_ids.indexOf(props.argument));
  //
  // QuestionComponent is either to do question or view previous completed question
  //
  const [QuestionComponent, setQuestionComponent] = useState(null);

  const showResult = (isCorrect) => {
    if (isCorrect) {
      setResult("Correct!");
    } else {
      setResult("Incorrect");
    }
    //
    // To display the result
    //
    setShowResultHead(true);

    setQCompleted(true);
  };
  //
  // If id is in completed q_ids then the question has been completed so ViewQuestion is displayed
  // For when user clicks previous to see answers to previously submitted questions
  //
  useEffect(() => {
    setShowResultHead(false);
    if (!completed_qs.completed_q_ids.includes(q_ids[currentIdx])) {
      setQCompleted(false);
      setQuestionComponent(
        <DoQuestion id={q_ids[currentIdx]} showResult={showResult}></DoQuestion>
      );
    } else {
      setQuestionComponent(
        <ViewQuestion
          id={q_ids[currentIdx]}
          showResult={showResult}
        ></ViewQuestion>
      );
    }
    setIsLoaded(true);
  }, [currentIdx]);

  const handle_next = (event) => {
    //
    // Moves to next generated question
    //
    event.preventDefault();
    if (currentIdx == q_ids.length - 1) {
      props.changePage(`finish`);
    } else {
      setCurrentIdx(currentIdx + 1);
    }
  };

  const handle_previous = (event) => {
    //
    // Moves to previous generated question
    //
    event.preventDefault();
    setCurrentIdx(currentIdx - 1);
  };

  if (!isLoaded) {
    return <h2>Loading...</h2>;
  } else {
    return (
      <>
        {/*-Header-*/}
        <div>
          <h1>{"Question " + (currentIdx + 1).toString()}</h1>
          <button onClick={() => props.changePage("home")}>X</button>
        </div>
        {/*--------*/}
        {showResultHead && <h2>{result}</h2>}
        {/*-DoQuestion or ViewQuestion-*/}
        {QuestionComponent}
        {/*----------------------------*/}
        {/*-Displayed when not the last question and when question completed-*/}
        {!qCompleted && currentIdx < q_ids.length - 1 && (
          <button onClick={() => props.changePage("finish")}>Finish</button>
        )}
        {/*------------------------------------------------------------------*/}
        <div>
          <button onClick={handle_previous} disabled={currentIdx == 0}>
            Previous
          </button>
          <button onClick={handle_next}>
            {currentIdx == q_ids.length - 1 ? "Finish" : "Next"}
          </button>
        </div>
      </>
    );
  }
}

QuestionPage.propTypes = {
  changePage: PropTypes.func,
  argument: PropTypes.number,
};

export default QuestionPage;
